#include "imports/stdlib.fc";

() send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";
int check_signature(int hash, slice signature, int public_key) asm "CHKSIGNU";
int slice_hash(slice s) asm "HASHSU";
int now() asm "NOW";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

(int, int, slice, int) load_data() inline_ref
asm """
  c4 PUSH
  CTOS
  256 LDU
  32 LDU
  LDMSGADDR
  32 LDU
  DROP
""";

(cell) send(slice addr)
asm """
  0 PUSHINT
  24 PUSHINT
  s1 s2 XCHG
  NEWC
  6 STU
  STSLICE
  OVER
  STGRAMS
  107 STU
  ENDC
  128 PUSHINT
  SENDRAWMSG
""";

() recv_external(slice s) {
  int op = s~load_uint(32);
  int t = op == 0x9df10277;
  ifnot (t) | (op == 0xbb4be234)
  {
    return ();
  }

  (int pk, int et, slice addr, int sno) = load_data();
  if (t)
  {
    s~load_uint(64);
    slice signature = s~load_bits(512);
    slice ic = s~load_ref().begin_parse();
    int hash = slice_hash(ic);
    int lf = ic~load_uint(32);
    int ns = ic~load_uint(32);

    throw_if(119, ns != sno + 1);
    throw_if(120, check_signature(hash, signature, pk) == 0);
    throw_if(121, lf <= 0);
    int n = now();
    throw_if(122, et < n);
    throw_if(123, n + lf < et);
    accept_message();

    set_data(begin_cell()
      .store_uint(pk, 256)
      .store_uint(lf + n, 32)
      .store_slice(addr)
      .store_uint(ns, 32)
    .end_cell());
  } else
  {
    throw_if(124, et > now());
    accept_message();
    send(addr);
  }
}

int get_seqno() method_id {
  slice s = get_data().begin_parse().skip_bits(555);
  return s~load_uint(32);
}

int get_execution_time() method_id {
  slice s = get_data().begin_parse().skip_bits(256);
  return s~load_uint(32);
}
