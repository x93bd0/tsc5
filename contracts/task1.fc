#include "imports/stdlib.fc";

() send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";
int check_signature(int hash, slice signature, int public_key) asm "CHKSIGNU";
int slice_hash(slice s) asm "HASHSU";
int now() asm "NOW";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

(int, int, slice, int) load_data() inline_ref
{
  slice st = get_data().begin_parse();
  return (
    st~load_uint(256), st~load_uint(32),
    st~load_msg_addr(),
    st~load_uint(32)
  );
}

() recv_external(slice s) {
  int op = s~load_uint(32);
  (int pk, int et, slice addr, int sno) = load_data();

  s~load_uint(64); ;; optimizable
  if (op == 0x9df10277)
  {
    slice signature = s~load_bits(512);
    slice ic = s~load_ref().begin_parse();
    int hash = slice_hash(ic);
    int lf = ic~load_uint(32);
    int ns = ic~load_uint(32);

    throw_if(119, ns != sno + 1);
    throw_if(120, check_signature(hash, signature, pk) == 0);
    throw_if(121, lf <= 0);
    int n = now();
    throw_if(122, et < n);
    throw_if(123, n + lf < et);
    accept_message();

    set_data(begin_cell()
      .store_uint(pk, 256)
      .store_uint(lf + et, 32)
      .store_slice(addr)
      .store_uint(ns, 32)
    .end_cell());
  } elseif (op == 0xbb4be234)
  {
    throw_if(124, et < now());
    accept_message();

    cell msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(addr)
      .store_coins(0)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .end_cell();

    send_raw_message(msg, 128);
  }
}

int get_seqno() method_id {
  (_, _, _, int sno) = load_data();
  return sno;
}

int get_execution_time() method_id {
  (_, int et, _, _) = load_data();
  return et;
}
