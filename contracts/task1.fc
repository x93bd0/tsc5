#include "imports/stdlib.fc";

() send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";
int check_signature(int hash, slice signature, int public_key) asm "CHKSIGNU";
int slice_hash(slice s) asm "HASHSU";
int now() asm "NOW";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

(int, int, slice, int) load_data() inline_ref
asm """
  c4 PUSH
  CTOS
  256 LDU
  32 LDU
  LDMSGADDR
  32 LDU
  DROP
""";

() send() impure
asm """
  c4 PUSH       // (c4)
  CTOS          // (s4)
  8 PUSHPOW2    // (s4, 512)
  SDSKIPFIRST   // (s4)
  32 LDU        // (et, s4)
  SWAP          // (s4, et)
  NOW           // (s4, et, now())
  GREATER       // (s4, et > now())
  124 THROWIF   // (s4)
  ACCEPT        // (s4)
  LDMSGADDR     // (addr, s4)
  SWAP          // (s4, addr)
  0 PUSHINT     // (s4, addr, zero)
  SWAP          // (s4, zero, addr)
  24 PUSHINT    // (s4, zero, addr, flags)
  NEWC          // (s4, zero, addr, flags, b)
  6 STU         // (s4, zero, addr, b)
  STSLICE       // (s4, zero, b)
  OVER          // (s4, zero, b, zero)
  STGRAMS       // (s4, zero, b)
  107 STU       // (s4, b)
  ENDC          // (s4, c)
  128 PUSHINT   // (s4, c, mode)
  SENDRAWMSG    // (s4)
  DROP          // ()
""";

() recv_external(slice s) {
  int op = s~load_uint(32);
  int t = op == 0x9df10277;
  ifnot (t) | (op == 0xbb4be234)
  {
    return ();
  }

  if (t)
  {
    (int pk, int et, slice addr, int sno) = load_data();
    s~load_uint(64);
    slice signature = s~load_bits(512);
    slice ic = s~load_ref().begin_parse();
    int hash = slice_hash(ic);
    int lf = ic~load_uint(32);
    int ns = ic~load_uint(32);

    throw_if(119, ns != sno + 1);
    throw_if(120, check_signature(hash, signature, pk) == 0);
    throw_if(121, lf <= 0);
    int n = now();
    throw_if(122, et < n);
    throw_if(123, n + lf < et);
    accept_message();

    set_data(begin_cell()
      .store_uint(pk, 256)
      .store_uint(lf + n, 32)
      .store_slice(addr)
      .store_uint(ns, 32)
    .end_cell());
  } else
  {
    send();
  }
}

int get_seqno() method_id {
  slice s = get_data().begin_parse().skip_bits(555);
  return s~load_uint(32);
}

int get_execution_time() method_id {
  slice s = get_data().begin_parse().skip_bits(256);
  return s~load_uint(32);
}
