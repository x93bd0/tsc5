#include "imports/stdlib.fc";

() send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";
int check_signature(int hash, slice signature, int public_key) asm "CHKSIGNU";
int slice_hash(slice s) asm "HASHSU";
int now() asm "NOW";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

() logic(slice in) impure inline
asm """
  32 LDU                  // (op, in)
  SWAP                    // (in, op)
  DUP                     // (in, op, op)
  2649817719 PUSHINT      // (in, op, op, op1)
  EQUAL                   // (in, op, cop1)
  SWAP                    // (in, cop1, op)
  3142312500 PUSHINT      // (in, cop1, op, op2)
  EQUAL                   // (in, cop1, cop2)
  s1 PUSH                 // (in, cop1, cop2, cop1)
  OR                      // (in, cop1, rop)

  IFNOT:<{
    DROP2 RET             // ()
  }>

  IF:<{
    64 LDU                // (q, in)
    9 PUSHPOW2 LDSLICEX   // (q, sig, in)
    LDREF DROP            // (q, sig, ic)
    CTOS                  // (q, sig, sc)
    DUP HASHSU            // (q, sig, sc, hash)
    SWAP                  // (q, sig, hash, sc)
    32 LDU                // (q, sig, hash, lf, sc)
    32 LDU                // (q, sig, hash, lf, ns, sc)
    DROP                  // (q, sig, hash, lf, ns)
    c4 PUSH CTOS          // (q, sig, hash, lf, ns, st)
    256 LDU               // (q, sig, hash, lf, ns, pk, st)
    32 LDU                // (q, sig, hash, lf, ns, pk, et, st)
    LDMSGADDR             // (q, sig, hash, lf, ns, pk, et, addr, st)
    32 LDU                // (q, sig, hash, lf, ns, pk, et, addr, sno, st)
    DROP                  // (q, sig, hash, lf, ns, pk, et, addr, sno)
    s1 s4 XCHG INC        // (q, sig, hash, lf, addr, pk, et, ns, sno + 1)
    OVER                  // (q, sig, hash, lf, addr, pk, et, ns, sno + 1, ns)
    EQUAL                 // (q, sig, hash, lf, addr, pk, et, ns, ns == sno + 1)
    119 THROWIFNOT        // (q, sig, hash, lf, addr, pk, et, ns)
    s6 XCHG0              // (q, ns, hash, lf, addr, pk, et, sig)
    s1 s5 XCHG            // (q, ns, et, lf, addr, pk, hash, sig)
    s2 PUSH               // (q, ns, et, lf, addr, pk, hash, sig, pk)
    CHKSIGNU              // (q, ns, et, lf, addr, pk, res)
    120 THROWIFNOT        // (q, ns, et, lf, addr, pk)
    s2 XCHG0              // (q, ns, et, pk, addr, lf)
    DUP                   // (q, ns, et, pk, addr, lf, lf)
    1 LESSINT             // (q, ns, et, pk, addr, lf, 1 > lf)
    121 THROWIF           // (q, ns, et, pk, addr, lf)
    NOW                   // (q, ns, et, pk, addr, lf, n)
    DUP                   // (q, ns, et, pk, addr, lf, n, n)
    s5 PUSH               // (q, ns, et, pk, addr, lf, n, n, et)
    GREATER               // (q, ns, et, pk, addr, lf, n, n > et)
    122 THROWIF           // (q, ns, et, pk, addr, lf, n)
    ADD                   // (q, ns, et, pk, addr, lf + n)
    DUP                   // (q, ns, et, pk, addr, lf + n, lf + n)
    s4 XCHG0              // (q, ns, lf + n, pk, addr, lf + n, et)
    LESS                  // (q, ns, lf + n, pk, addr, lf + n < et)
    123 THROWIF           // (q, ns, lf + n, pk, addr)
    ACCEPT                // (q, ns, lf + n, pk, addr)
    -ROT                  // (q, ns, addr, lf + n, pk)
    NEWC                  // (q, ns, addr, lf + n, pk, b)
    256 STU               // (q, ns, addr, lf + n, b)
    32 STU                // (q, ns, addr, b)
    STSLICE               // (q, ns, b)
    32 STU                // (q, b)
    ENDC                  // (q, c)
    c4 POP                // (q)
    DROP                  // ()
    RET
  }>

  DROP          // ()
  c4 PUSH       // (c4)
  CTOS          // (s4)
  8 PUSHPOW2    // (s4, 512)
  SDSKIPFIRST   // (s4)
  32 LDU        // (et, s4)
  SWAP          // (s4, et)
  NOW           // (s4, et, now())
  GREATER       // (s4, et > now())
  124 THROWIF   // (s4)
  ACCEPT        // (s4)
  LDMSGADDR     // (addr, s4)
  SWAP          // (s4, addr)
  0 PUSHINT     // (s4, addr, zero)
  SWAP          // (s4, zero, addr)
  24 PUSHINT    // (s4, zero, addr, flags)
  NEWC          // (s4, zero, addr, flags, b)
  6 STU         // (s4, zero, addr, b)
  STSLICE       // (s4, zero, b)
  OVER          // (s4, zero, b, zero)
  STGRAMS       // (s4, zero, b)
  107 STU       // (s4, b)
  ENDC          // (s4, c)
  128 PUSHINT   // (s4, c, mode)
  SENDRAWMSG    // (s4)
  DROP          // ()
""";

() recv_external(slice s) {
  logic(s);
}

int logic1() impure inline
asm """
  c4 PUSH CTOS    // (s)
  555 PUSHINT     // (s, 555)
  SDSKIPFIRST     // (s)
  32 LDU          // (r, s)
  DROP            // (r)
""";

int get_seqno() method_id
{
  return logic1();
}

int logic2() impure inline
asm """
  c4 PUSH CTOS    // (s)
  8 PUSHPOW2      // (s, 256)
  SDSKIPFIRST     // (s)
  32 LDU          // (r, s)
  DROP            // (r)
""";

int get_execution_time() method_id
{
  return logic2();
}
