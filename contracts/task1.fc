#include "imports/stdlib.fc";

() send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";
int check_signature(int hash, slice signature, int public_key) asm "CHKSIGNU";
int slice_hash(slice s) asm "HASHSU";
int now() asm "NOW";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

(int, int, slice, int) load_data() inline_ref
{
  slice st = get_data().begin_parse();
  return (
    st~load_uint(256), st~load_uint(32),
    st~load_msg_addr(),
    st~load_uint(32)
  );
}

() recv_external(slice s) asm """
PROC:<{
  32 LDU
  c4 PUSH
  CTOS
  256 LDU
  32 LDU
  LDMSGADDR
  32 LDU
  DROP
  s0 s4 XCHG
  64 LDU
  NIP
  s5 PUSH
  2649817719 PUSHINT
  EQUAL
  IF:<{
    s5 POP
    s0 s4 XCHG
    9 PUSHPOW2
    LDSLICEX
    LDREF
    DROP
    CTOS
    DUP
    HASHSU
    SWAP
    32 LDU
    32 LDU
    DROP
    s0 s6 XCHG
    INC
    s6 s(-1) PUXC
    NEQ
    119 THROWIF
    s2 s4 XCPU
    CHKSIGNU
    0 EQINT
    120 THROWIF
    DUP
    1 LESSINT
    121 THROWIF
    NOW
    s2 s0 PUSH2
    LESS
    122 THROWIF
    s0 s1 PUSH2
    ADD
    s0 s3 XCHG2
    LESS
    123 THROWIF
    ACCEPT
    SWAP
    ADD
    SWAP
    NEWC
    256 STU
    32 STU
    ROT
    STSLICER
    32 STU
    ENDC
    c4 POP
  }>ELSE<{
    DROP
    2 2 BLKDROP2
    s0 s2 XCHG
    3142312500 PUSHINT
    EQUAL
    IF:<{
      NOW
      GREATER
      124 THROWIF
      ACCEPT
      0 PUSHINT
      24 PUSHINT
      NEWC
      6 STU
      ROT
      STSLICER
      OVER
      STGRAMS
      107 STU
      ENDC
      7 PUSHPOW2
      SENDRAWMSG
    }>ELSE<{
      2DROP
    }>
  }>
}>
""";

(int, int, slice, int) load_data() inline_ref
{
  slice st = get_data().begin_parse();
  return (
    st~load_uint(256), st~load_uint(32),
    st~load_msg_addr(),
    st~load_uint(32)
  );
}

int get_seqno() method_id {
  (_, _, _, int x) = load_data();
  return x;
}

int get_execution_time() method_id {
  (_, int x, _, _) = load_data();
  return x;
}
