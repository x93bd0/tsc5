#include "imports/stdlib.fc";

() send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";
int check_signature(int hash, slice signature, int public_key) asm "CHKSIGNU";
int slice_hash(slice s) asm "HASHSU";
int now() asm "NOW";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

(int, int, slice, int) load_data() inline_ref
asm """
  c4 PUSH
  CTOS
  256 LDU
  32 LDU
  LDMSGADDR
  32 LDU
  DROP
""";

() send() impure
asm """
  c4 PUSH       // (c4)
  CTOS          // (s4)
  8 PUSHPOW2    // (s4, 512)
  SDSKIPFIRST   // (s4)
  32 LDU        // (et, s4)
  SWAP          // (s4, et)
  NOW           // (s4, et, now())
  GREATER       // (s4, et > now())
  124 THROWIF   // (s4)
  ACCEPT        // (s4)
  LDMSGADDR     // (addr, s4)
  SWAP          // (s4, addr)
  0 PUSHINT     // (s4, addr, zero)
  SWAP          // (s4, zero, addr)
  24 PUSHINT    // (s4, zero, addr, flags)
  NEWC          // (s4, zero, addr, flags, b)
  6 STU         // (s4, zero, addr, b)
  STSLICE       // (s4, zero, b)
  OVER          // (s4, zero, b, zero)
  STGRAMS       // (s4, zero, b)
  107 STU       // (s4, b)
  ENDC          // (s4, c)
  128 PUSHINT   // (s4, c, mode)
  SENDRAWMSG    // (s4)
  DROP          // ()
""";

() logic(slice in) impure
asm """
  64 LDU DROP           // (in)
  9 PUSHPOW2 LDSLICEX   // (sig, in)
  LDREF CTOS            // (sig, ic, in)
  DUP HASHSU            // (sig, ic, hash)
  SWAP                  // (sig, hash, ic)
  32 LDU                // (sig, hash, lf, ic)
  32 LDU                // (sig, hash, lf, ns, ic)
  DROP                  // (sig, hash, lf, ns)
  c4 PUSH CTOS          // (sig, hash, lf, ns, st)
  256 LDU               // (sig, hash, lf, ns, pk, st)
  32 LDU                // (sig, hash, lf, ns, pk, et, st)
  LDMSGADDR             // (sig, hash, lf, ns, pk, et, addr, st)
  32 LDU                // (sig, hash, lf, ns, pk, et, addr, sno, st)
  DROP                  // (sig, hash, lf, ns, pk, et, addr, sno)
  s1 s4 XCHG INC        // (sig, hash, lf, addr, pk, et, ns, sno + 1)
  OVER                  // (sig, hash, lf, addr, pk, et, ns, sno + 1, ns)
  EQUAL                 // (sig, hash, lf, addr, pk, et, ns, ns == sno + 1)
  119 THROWIFNOT        // (sig, hash, lf, addr, pk, et, ns)
  s6 XCHG0              // (ns, hash, lf, addr, pk, et, sig)
  s1 s5 XCHG            // (ns, et, lf, addr, pk, hash, sig)
  s2 PUSH               // (ns, et, lf, addr, pk, hash, sig, pk)
  CHKSIGNU              // (ns, et, lf, addr, pk, res)
  120 THROWIFNOT        // (ns, et, lf, addr, pk)
  s2 XCHG0              // (ns, et, pk, addr, lf)
  DUP                   // (ns, et, pk, addr, lf, lf)
  1 LESSINT             // (ns, et, pk, addr, lf, 1 > lf)
  121 THROWIF           // (ns, et, pk, addr, lf)
  NOW                   // (ns, et, pk, addr, lf, n)
  DUP                   // (ns, et, pk, addr, lf, n, n)
  s5 PUSH               // (ns, et, pk, addr, lf, n, n, et)
  GREATER               // (ns, et, pk, addr, lf, n, n > et)
  122 THROWIF           // (ns, et, pk, addr, lf, n)
  ADD                   // (ns, et, pk, addr, lf + n)
  DUP                   // (ns, et, pk, addr, lf + n, lf + n)
  s4 XCHG0              // (ns, lf + n, pk, addr, lf + n, et)
  LESS                  // (ns, lf + n, pk, addr, lf + n < et)
  123 THROWIF           // (ns, lf + n, pk, addr)
  ACCEPT                // (ns, lf + n, pk, addr)
  -ROT                  // (ns, addr, lf + n, pk)
  NEWC                  // (ns, addr, lf + n, pk, b)
  256 STU               // (ns, addr, lf + n, b)
  32 STU                // (ns, addr, b)
  STSLICE               // (ns, b)
  32 STU                // (b)
  ENDC                  // (c)
  c4 POP                // ()
""";

() recv_external(slice s) {
  int op = s~load_uint(32);
  int t = op == 0x9df10277;
  ifnot (t) | (op == 0xbb4be234)
  {
    return ();
  }

  if (t)
  {
    logic(s);
  } else
  {
    send();
  }
}

int get_seqno() method_id {
  slice s = get_data().begin_parse().skip_bits(555);
  return s~load_uint(32);
}

int get_execution_time() method_id {
  slice s = get_data().begin_parse().skip_bits(256);
  return s~load_uint(32);
}
