#include "imports/stdlib.fc";

(cell, ()) ~dict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) "DICTSET";
(cell, int) ~dict_delete(cell dict, int key_len, slice index) asm(index dict key_len) "DICTDEL";
(slice, slice, int) dict_get_next?(cell dict, int key_len, slice pivot) asm(pivot dict key_len -> 1 0 2) "DICTGETNEXT" "NULLSWAPIFNOT2";
(slice, slice, int) dict_get_min?(cell dict, int key_len) asm (-> 1 0 2) "DICTMIN" "NULLSWAPIFNOT2";


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?())
  {
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  ;; cs~load_uint(4);

  slice snd_addr = cs~load_msg_addr();
  int op = in_msg_body~load_uint(32);
  in_msg_body~load_uint(64);

  slice data = get_data().begin_parse();
  slice adm_addr = data~load_msg_addr();

  cell users = new_dict();
  ifnot (data.slice_empty?())
  {
    users = data~load_dict();
  }

  if (op == 0x368ddef3)
  {
    throw_if(120, slice_hash(snd_addr) != slice_hash(adm_addr));
    accept_message();

    slice addr = in_msg_body~load_msg_addr();
    slice share = in_msg_body~load_bits(32);
    users~dict_set(256, addr, share);

    set_data(begin_cell()
      .store_slice(adm_addr)
      .store_dict(users)
    .end_cell());
  }

  elseif (op == 0x278205c8)
  {
    slice addr = in_msg_body~load_msg_addr();
    throw_if(120, slice_hash(snd_addr) != slice_hash(adm_addr));
    throw_unless(121, users~dict_delete(256, addr));
    accept_message();

    set_data(begin_cell()
      .store_slice(adm_addr)
      .store_dict(users)
    .end_cell());
  }

  elseif (op == 0x68530b3)
  {
    throw_if(122, users.dict_empty?());
    accept_message();

    (slice key, slice val, int flag) = users.dict_get_min?(256);
    while (flag) {
      cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(key)
        .store_coins(val~load_uint(32))
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .end_cell();

      send_raw_message(msg, 1);
      (key, val, flag) = users.dict_get_next?(256, key);
    }
  }

  elseif (op == 0x7362d09c)
  {
    throw_if(122, users.dict_empty?());
    accept_message();
  }
}
