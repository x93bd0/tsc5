#include "imports/stdlib.fc";

(cell, ()) ~dict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) "DICTSET";
(cell, int) ~dict_delete(cell dict, int key_len, slice index) asm(index dict key_len) "DICTDEL";
(slice, slice, int) dict_get_next?(cell dict, int key_len, slice pivot) asm(pivot dict key_len -> 1 0 2) "DICTGETNEXT" "NULLSWAPIFNOT2";
(slice, slice, int) dict_get_min?(cell dict, int key_len) asm (-> 1 0 2) "DICTMIN" "NULLSWAPIFNOT2";
(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";
(int) slice_data_equal?(slice s1, slice s2) asm "SDEQ";


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?())
  {
    return ();
  }

  int op = in_msg_body~load_uint(32);
  in_msg_body~load_uint(64);

  slice cs = in_msg_full.begin_parse();
  cs~skip_bits(4);
  slice addr = cs~load_msg_addr();

  slice data = get_data().begin_parse();
  slice admin = data~load_msg_addr();
  cell dict = data~load_dict();

  if (op == 0x368ddef3)
  {
    throw_unless(120, slice_data_equal?(admin, addr));
    dict~dict_set(256, in_msg_body~load_msg_addr().skip_bits(11), in_msg_body~load_bits(32));
    set_data(begin_cell()
      .store_slice(admin)
      .store_dict(dict)
    .end_cell());
  }

  elseif (op == 0x278205c8)
  {
    throw_unless(120, slice_data_equal?(admin, addr));
    int flag = dict~dict_delete(256, in_msg_body~load_msg_addr().skip_bits(11));
    throw_if(121, flag == 0);
  }

  elseif (op == 0x68530b3)
  {
    throw_if(122, dict.dict_empty?());
  }

  elseif (op == 0x7362d09c)
  {
    throw_if(122, dict.dict_empty?());
  }
}

(cell) get_users() method_id {
  slice d = get_data().begin_parse();
  d~load_msg_addr();
  return d~load_dict();
}

(slice) get_user_share(slice user_address) method_id {
  (slice d, int a) = get_users().dict_get?(256, user_address);
  return d;
}
