#include "imports/stdlib.fc";

int cell_null?(cell c) asm "ISNULL";
(slice, int) udict_get?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUGET" "NULLSWAPIFNOT";
int slice_empty?(slice s) asm "SEMPTY";


(int, cell, int) load_storage() {
  slice cs = get_data().begin_parse();
  return (cs~load_uint(32), cs~load_ref(), cs~load_uint(32));
}

cell get_storage() {
  (_, cell st, _) = load_storage();
  return st;
}

() wrap_storage(int version_id, cell storage, int flag) impure {
  set_data(begin_cell()
    .store_uint(version_id, 32)
    .store_ref(storage)
    .store_uint(flag, 32)
  .end_cell());
}

int version() method_id {
  slice cs = get_data().begin_parse();
  return cs~load_uint(32);
}

() recv_internal(int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
  int ev = in_msg_body~load_uint(32);
  if (ev == 0)
  {
    wrap_storage(1, begin_cell().end_cell(), 1);
    return ();
  }

  (cell ec, cell mi, cell pl) = (
    in_msg_body~load_maybe_ref(), in_msg_body~load_dict(), in_msg_body~load_ref());
  (int v, cell st, int flag) = load_storage();

  if (ev > v) | (flag == 1)
  {
    throw_unless(200, ~(cell_null?(ec)));
    while (ev > v)
    {
      (slice val, int fl) = udict_get?(mi, 32, v);
      if (fl == 0) { throw(400); }
      v = val~load_uint(32);
    } if (ev != v) { throw(400); }
  }

  wrap_storage(v, st, 0);
}

;; <<<<< Custom version-specific code begins
;; This section (everything between << and >> characters) will be fully substituted for each version.
;; This is an IMPORTANT part, and these exact lines with <<<<< and >>>>> must be present in your code for the testing system to work correctly.
;; All the code provided here serves as an example of the version-code, which your update code must be compatible with.
;; Refer to the "3-example" directory for more version examples.

;; from counter-v0.fc
cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    slice cs = storage.begin_parse();
    int current_amount = cs.preload_uint(32);
    return begin_cell().store_uint(current_amount + 1, 32).end_cell();
}

cell migrate_one(cell old_storage) { ;; it's just a placeholder that is required for correct compilation
    return old_storage;
}

;; Custom version-specific code ends >>>>>
