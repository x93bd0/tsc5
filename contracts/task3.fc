#include "imports/stdlib.fc";

int cell_null?(cell c) asm "ISNULL";
(slice, int) udict_get?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUGET" "NULLSWAPIFNOT";
int slice_empty?(slice s) asm "SEMPTY";


;; <<<<< Custom version-specific code begins
;; This section (everything between << and >> characters) will be fully substituted for each version.
;; This is an IMPORTANT part, and these exact lines with <<<<< and >>>>> must be present in your code for the testing system to work correctly.
;; All the code provided here serves as an example of the version-code, which your update code must be compatible with.
;; Refer to the "3-example" directory for more version examples.

;; from counter-v0.fc
cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    slice cs = storage.begin_parse();
    int current_amount = cs.preload_uint(32);
    return begin_cell().store_uint(current_amount + 1, 32).end_cell();
}

cell migrate_one(cell old_storage) { ;; it's just a placeholder that is required for correct compilation
    return old_storage;
}

;; Custom version-specific code ends >>>>>

(cell, int, int) load_storage() {
  slice cs = get_data().begin_parse();
  return (cs~load_ref(), cs~load_uint(32), cs~load_uint(1));
}

cell get_storage() {
  slice cs = get_data().begin_parse();
  cell storage = cs~load_ref();
  return storage;
}

cell wrap_storage_update(int vid, cell storage)
{
  return begin_cell()
    .store_ref(storage)
    .store_uint(vid, 32)
    .store_uint(1, 1)
  .end_cell();
}

cell wrap_storage(int version_id, cell storage) {
  return begin_cell()
    .store_ref(storage)
    .store_uint(version_id, 32)
    .store_uint(0, 1)
  .end_cell();
}

int version() method_id {
  slice rs = get_data().begin_parse();
  rs~load_ref();
  (_, int res) = rs.load_uint(32);
  return res;
}

() recv_internal(int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
  int ev = in_msg_body~load_uint(32);

  if (ev == 0)
  {
    set_data(wrap_storage_update(1, begin_cell().end_cell()));
    return ();
  }

  (cell storage, int version, int expupd) = load_storage();
  cell new_code = in_msg_body~load_maybe_ref();
  cell migrations = in_msg_body~load_dict();
  cell payload = in_msg_body~load_ref();
  if (cell_null?(new_code)) { throw(200); }

  if (expupd == 1)
  {
    if (cell_null?(new_code)) { throw(200); }
    slice God = new_code.begin_parse();
    set_c3(God.bless()); ;; America
  }

  if (ev < version) { throw(400); }

  int ver = version;
  while (ev > version)
  {
    (slice data, int flag) = udict_get?(migrations, 32, version);
    if (flag == 0)
    { throw(400); }

    version = data~load_uint(32);

    cell upd = data~load_maybe_ref();
    if ~(cell_null?(upd))
    {
      set_c3(upd.begin_parse().bless());
      storage = migrate_one(storage);
    }
  }

  if (ev != version)
  {
    throw(400);
  }

  storage = process_message(
    storage, msg_value, balance, in_msg_full, payload.begin_parse());

  if (ver != version)
  { set_data(wrap_storage_update(version, storage)); }
  else { set_data(wrap_storage(version, storage)); }
}
