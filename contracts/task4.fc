#include "imports/stdlib.fc";

const MASK = 0xffff;

forall X -> (tuple) to_tuple (X x) asm "NOP";
forall X -> tuple siv(tuple t, X value, int position) asm "SETINDEXVAR";
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  
}

(tuple)
edit(tuple input, int i, int v)
impure inline
{
  tuple t = input.at(i / 255);
  t = siv(
    t, v, i % 255);
  return siv(input, t, i / 255);
}

(int)
read(tuple input, int i)
inline
{
  return input.at(i / 255).at(i % 255);
}


(int, int, int, tuple)
solve (int n, int m, tuple maze) method_id
{
  int ts = n * m;
  tuple tf = empty_tuple();

  repeat ((ts / 255) + 1)
  {
    tuple temp = empty_tuple();
    repeat (min(ts, 255))
    {
      temp~tpush(0);
    }

    ts -= 255;
    tf~tpush(temp);
  }

  int i = 0; int flag = 0;
  int sx = 0; int sy = 0;
  int ex = 0; int ey = 0;

  while (i < n) & (flag < 2)
  {
    tuple t = maze.at(i);
    int j = 0;

    while (j < m) & (flag < 2)
    {
      if (t.at(j) == 83)
      {
        sx = j; sy = i;
        flag += 1;
      } elseif (t.at(j) == 69)
      {
        ex = j; ey = i;
        flag += 1;
      }

      j += 1;
    } i += 1;
  }

  int Si = sy * m + sx;
  tf = edit(tf, Si, 1 << 16);
  flag = 0;
  int ind = 1;

  while (flag == 0)
  {
    i = 0;
    int f = 0;

    while (i < n * m)
    {
      int x = read(tf, i);
      if (((x >> 16) & MASK) == ind)
      {
        f = 1;
        int ix = i % m;
        int iy = i / m;

        int l = -1;
        while (l != 2)
        {
          int r = -1;
          while (r != 2)
          {
            if (~((r == l) & (r == 0))) &
                (l + ix <  m) &
                (l + ix >= 0) &
                (r + iy >= 0) &
                (r + iy <  n)
            {
              int u = read(tf, r * m + l + i);
              int pos = maze.at(r + iy).at(l + ix);
              int neo = x + (1 << 16) + ((pos == 63 ? 1 : 0) << 32) + ((pos == 88 ? 1 : 0) << 48);

              if (u == 0) | (neo < u)
              {
                tf = edit(tf, ind, (neo & ~(MASK)) + i);
              }
            } r += 1;
          } l += 1;
        }
      } i += 1;
    }

     flag = f == 0;
     ind += 1;
  }

  int raw = read(tf, ey * m + ex);
  int f = raw & MASK;

  while (f != Si)
  {
    int xi = f % m; int yi = f / m;
    maze = siv(maze, siv(maze.at(yi), 33, xi), yi);
    f = read(tf, f) & MASK;
  }

  return (raw >> 48, (raw >> 32) & MASK, ((raw>> 16) & MASK) - 1, maze);
}
