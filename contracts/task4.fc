#include "imports/stdlib.fc";

const MASK = 0xffff;
const MASK64 = 0xffffffffffffffff;

(int, int) dm(int v, int d) asm "DIVMOD";
forall X -> (tuple) to_tuple (X x) asm "NOP";
forall X -> tuple siv(tuple t, X value, int position) asm "SETINDEXVAR";
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  
}

(tuple)
edit(tuple input, int i, int v)
impure inline
asm """
  // (in, i, v)
  SWAP            // (in, v, i)
  8 PUSHPOW2DEC   // (in, v, i, 255)
  DIVMOD          // (in, v, i / 255, i % 255)
  s3 s1 PUSH2     // (in, v, i / 255, i % 255, in, i / 255)
  INDEXVAR        // (in, v, i / 255, i % 255, st)
  -ROT            // (in, v, st, i / 255, i % 255)
  s1 s3 XCHG      // (in, i / 255, st, v, i % 255)
  SETINDEXVAR     // (in, i / 255, st)
  SWAP            // (in, st, i / 255)
  SETINDEXVAR     // (out)
""";

{-
  tuple t = input.at(i / 255);
  t = siv(
    t, v, i % 255);
  return siv(input, t, i / 255);
-}

(int)
read(tuple input, int i)
inline
asm """
  // (in, i)
  8 PUSHPOW2DEC   // (in, i, 255)
  DIVMOD          // (in, i / 255, i % 255)
  -ROT            // (i % 255, in, i / 255)
  INDEXVAR        // (i % 255, st)
  SWAP            // (st, i % 255)
  INDEXVAR        // (val)
""";

(int) ifLogic(int m, int x, int l, int n, int y, int r)
inline
asm """
  ADD DUP
  0 GEQINT
  -ROT
  GREATER
  AND
  s3 XCHG0
  -ROT
  ADD DUP
  0 GEQINT
  -ROT
  GREATER
  AND AND
""";


(int, int, int, tuple)
solve (int n, int m, tuple maze) method_id
{
  int Ts = n * m;
  int ts = Ts;
  tuple tf = empty_tuple();

  repeat ((ts / 255) + 1)
  {
    tuple temp = empty_tuple();
    repeat (min(ts, 255))
    {
      temp~tpush(MASK64);
    }

    ts -= 255;
    tf~tpush(temp);
  }

  int i = 0; int flag = 0;
  int sx = 0; int sy = 0;
  int ex = 0; int ey = 0;

  while (i < n) & (flag < 2)
  {
    tuple t = maze.at(i);
    int j = 0;

    while (j < m) & (flag < 2)
    {
      if (t.at(j) == 83)
      {
        sx = j; sy = i;
        flag += 1;
      } elseif (t.at(j) == 69)
      {
        ex = j; ey = i;
        flag += 1;
      }

      j += 1;
    } i += 1;
  }

  tf = edit(tf, sy * m + sx, 1 << 16);
  tuple queue = to_tuple([sy * m + sx]);
  tuple next_queue = empty_tuple();
  int s = 0; int e = 1;
  int ne = 0;

  while (e > 0)
  {
    while (s < e)
    {
      int i = queue.at(s);
      int x = read(tf, i);

      (int iy, int ix) = divmod(i, m);
      int l = -1;
      while (l != 2)
      {
        int r = -1;
        while (r != 2)
        {
          if (ifLogic(n, iy, r, m, ix, l))
          {
            int ind = r * m + l + i;
            int u = read(tf, ind);
            int pos = maze.at(r + iy).at(l + ix);
            int neo = x + (1 << 16) + ((pos == 63) * -1 << 32) + ((pos == 88) * -1 << 48);

            if (neo < u)
            {
              tf = edit(tf, ind, (neo & ~(MASK)) + i);
              ne += 1; next_queue~tpush(ind);
            }
          } r += 1;
        } l += 1;
      }

      s += 1;
    }

    s = 0; e = ne;
    ne = 0;
    queue = next_queue;
    next_queue = empty_tuple();
  }

  int raw = read(tf, ey * m + ex);
  int x = (raw >> 48);
  int p = (raw >> 32) & MASK;
  int d = (raw >> 16) & MASK;
  int f = raw & MASK;

  repeat (d - 2)
  {
    (int yi, int xi) = divmod(f, m);
    maze = siv(maze, siv(maze.at(yi), 33, xi), yi);
    int temp = read(tf, f);
    f = read(tf, f) & MASK;
  }

  return (x, p, d - 1, maze);
}
