#include "imports/stdlib.fc";

const MASK = 0xffff;

forall X -> (tuple) to_tuple (X x) asm "NOP";
forall X -> tuple siv(tuple t, X value, int position) asm "SETINDEXVAR";
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  
}

(tuple)
edit(tuple input, int i, int v)
impure inline
{
  int res = input.at(i / 6);
  res -= (res >> ((i % 6) * 40)) - (res >> (((i % 6) + 1) * 40) << 40) << ((i % 6) * 40);
  res += v << ((i % 6) * 40);
  return siv(
    input, res, i / 6);
}

(int)
read(tuple input, int i)
inline
{
  int v = input.at(i / 6);
  return (v >> ((i % 6) * 40)) - (v >> (((i % 6) + 1) * 40) << 40);
}

(int)
make (int d, int p, int x, int f)
inline
{
  return (f << 30) + (x << 20) + (p << 10) + d;
}

(int, int, int, int)
unmakef (int v)
inline
{
  return (v & MASK, (v >> 10) & MASK, (v >> 20) & MASK, (v >> 30) & MASK);
}

(int, int, int)
unmake (int v)
inline
{
  return (v & MASK, (v >> 10) & MASK, (v >> 20) & MASK);
}


(int, int, int, tuple)
solve (int n, int m, tuple maze) method_id
{
  int ts = n * m;
  tuple tf = empty_tuple();

  int i = 0; int flag = 0;
  int sx = 0; int sy = 0;
  int ex = 0; int ey = 0;

  while (i < n) & (flag < 2)
  {
    tuple t = maze.at(i);
    int j = 0;

    while (j < m) & (flag < 2)
    {
      if (t.at(j) == 83)
      {
        sx = j; sy = i;
        flag += 1;
      } elseif (t.at(j) == 69)
      {
        ex = j; ey = i;
        flag += 1;
      }

      j += 1;
    } i += 1;
  }

  tf = edit(tf, sy * m + sx, make(1, 0, 0, 0));
  flag = 0;
  int ind = 1;

  while (flag == 0)
  {
    i = 0;
    int f = 0;

    while (i < n * m)
    {
      int x = read(tf, i);
      (int xd, int xp, int xx) = unmake(x);

      if (xd == ind)
      {
        f = 1;
        int ix = i % m;
        int iy = i / m;

        int l = -1;
        while (l != 2)
        {
          int r = -1;
          while (r != 2)
          {
            if (~((r == l) & (r == 0))) &
                (l + ix >= 0) &
                (l + ix <  m) &
                (r + iy >= 0) &
                (r + iy <  n)
            {
              int u = read(tf, (r + iy) * m + (l + ix));
              (int ud, int up, int ux) = unmake(u);

              int pos = maze.at(r + iy).at(l + ix);
              int ext = pos == 63 ? 1 : 0;
              int ext2 = pos == 88 ? 1 : 0;

              if (ud == 0)
              {
                tf = edit(tf, (r + iy) * m + (l + ix), make(xd + 1, xp + ext, xx + ext2, iy * m + ix));
              }
              elseif (xx + ext2 < ux)
              {
                tf = edit(tf, (r + iy) * m + (l + ix), make(xd + 1, xp + ext, xx + ext2, iy * m + ix));
              } elseif (xx + ext2 == ux)
              {
                if (xp + ext < up)
                {
                  tf = edit(tf, (r + iy) * m + (l + ix), make(xd + 1, xp + ext, xx + ext2, iy * m + ix));
                } elseif (xp + ext == up) & (xd + 1 < up)
                {
                  tf = edit(tf, (r + iy) * m + (l + ix), make(xd + 1, xp + ext, xx + ext2, iy * m + ix));
                }
              }
            } r += 1;
          } l += 1;
        }
      } i += 1;
    }

    if (f == 0) {
      flag = 1;
    } ind += 1;
  }

  int raw = read(tf, ey * m + ex);
  (int d, int p, int x, int f) = unmakef(raw);

  int td = d;
  while (td > 2)
  {
    int xi = f % m; int yi = f / m;
    maze = siv(maze, siv(maze.at(yi), 33, xi), yi);
    int temp = read(tf, f);
    (td, f) = (temp & MASK, (temp >> 48) & MASK);
  }

  return (x, p, d - 1, maze);
}
